{
  "no_authz_inputs": ["createOrganizationInput"],
  "mappings": [
    {
      "namespace": "Organization",
      "inputs": [
        "organization",
        "CreateProjectInput",
        "CreateCredentialInput",
        "CreateWebhookInput",
        "InviteMemberInput"
      ]
    },
    {
      "namespace": "Project",
      "inputs": [
        "project",
        "CreateCredentialInput",
        "CreateCustomerInput",
        "CreateDropInput"
      ]
    }
  ],
  "schema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\nscalar DateTime\n\nscalar JSON\n\nscalar NaiveDateTime\n\nscalar UUID\ntype AcceptInvitePayload {\n  invite: Invite!\n}\ntype AccessToken {\n  accessToken: String!\n  expiresAt: NaiveDateTime!\n  tokenType: String!\n}\ntype Collection {\n  id: UUID!\n  blockchain: Blockchain!\n  supply: Int\n  creationStatus: CreationStatus!\n  address: String\n  totalMints: Int!\n  metadataJson: MetadataJson\n  mints: [CollectionMint!]\n}\ntype CollectionMint {\n  id: UUID!\n  collectionId: UUID!\n  address: String!\n  owner: String!\n  creationStatus: CreationStatus!\n  createdBy: UUID!\n  createdAt: NaiveDateTime!\n  collection: Collection\n}\ntype CreateCredentialPayload {\n  credential: Credential!\n  accessToken: AccessToken!\n}\ntype CreateCustomerPayload {\n  customer: Customer!\n}\ntype CreateDropPayload {\n  drop: Drop!\n}\ntype CreateOrganizationPayload {\n  organization: Organization!\n}\ntype CreateProjectPayload {\n  project: Project!\n}\ntype CreateTreasuryWalletPayload {\n  wallet: Wallet!\n}\ntype CreateWebhookPayload {\n  webhook: Webhook!\n  secret: String!\n}\ntype Credential {\n  name: String!\n  clientId: String!\n  scopes: [String!]!\n  audiences: [String!]!\n  createdById: UUID!\n  organizationId: UUID!\n  createdAt: NaiveDateTime!\n  createdBy: User\n  projects: [Project!]!\n}\ntype Customer {\n  id: UUID!\n  projectId: UUID!\n  createdAt: NaiveDateTime!\n  updatedAt: NaiveDateTime\n  treasury: Treasury\n}\ntype DeleteWebhookPayload {\n  webhook: UUID!\n}\ntype Drop {\n  id: UUID!\n  projectId: UUID!\n  collectionId: UUID!\n  creationStatus: CreationStatus!\n  startTime: NaiveDateTime\n  endTime: NaiveDateTime\n  price: Int!\n  createdBy: UUID!\n  createdAt: NaiveDateTime!\n  collection: Collection\n}\ntype EventType {\n  archived: Boolean\n  createdAt: String!\n  description: String!\n  name: String!\n  schemas: JSON!\n  updatedAt: String!\n}\ntype Invite {\n  id: UUID!\n  email: String!\n  status: InviteStatus!\n  organizationId: UUID!\n  createdBy: UUID!\n  createdAt: NaiveDateTime!\n  updatedAt: NaiveDateTime\n  member: Member\n  organization: Organization\n}\ntype Member {\n  userId: UUID!\n  user: User\n  id: UUID!\n  organizationId: UUID!\n  createdAt: NaiveDateTime!\n  revokedAt: NaiveDateTime\n  inviteId: UUID!\n  organization: Organization\n  invite: Invite\n}\ntype MetadataJson {\n  collectionId: UUID!\n  identifier: String!\n  name: String!\n  uri: String!\n  symbol: String!\n  description: String!\n  image: String!\n  animationUrl: String\n  externalUrl: String\n  attributes: [MetadataJsonAttribute!]\n}\ntype MetadataJsonAttribute {\n  id: UUID!\n  collectionId: UUID!\n  traitType: String!\n  value: String!\n}\ntype MintEditionPayload {\n  collectionMint: Model!\n}\ntype Model {\n  id: UUID!\n  collectionId: UUID!\n  address: String!\n  owner: String!\n  creationStatus: CreationStatus!\n  createdBy: UUID!\n  createdAt: NaiveDateTime!\n}\ntype Mutation {\n  \n  createCredential(input: CreateCredentialInput!): CreateCredentialPayload!\n  \n  createCustomer(input: CreateCustomerInput!): CreateCustomerPayload!\n  \n  createDrop(input: CreateDropInput!): CreateDropPayload!\n  \n  mintEdition(input: MintDropInput!): MintEditionPayload!\n  \n  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload!\n  \n  createProject(input: CreateProjectInput!): CreateProjectPayload!\n  \n  inviteMember(input: InviteMemberInput!): Invite!\n  \n  acceptInvite(input: AcceptInviteInput!): AcceptInvitePayload!\n  \n  createTreasuryWallet(input: CreateTreasuryWalletInput!): CreateTreasuryWalletPayload!\n  \n  createWebhook(input: CreateWebhookInput!): CreateWebhookPayload!\n  \n  deleteWebhook(input: DeleteWebhookInput!): DeleteWebhookPayload!\n}\ntype Organization {\n  id: UUID!\n  credential(clientId: String!): Credential!\n  credentials(limit: Int, offset: Int): [Credential!]!\n  name: String!\n  createdAt: NaiveDateTime!\n  deactivatedAt: NaiveDateTime\n  profileImageUrl: String\n  members: [Member!]\n  owner: Owner\n  invites(status: InviteStatus): [Invite!]!\n  projects: [Project!]!\n  webhooks: [Webhook!]\n  webhook(id: UUID!): Webhook\n}\ntype Owner {\n  userId: UUID!\n  user: User\n  id: UUID!\n  organizationId: UUID!\n  createdAt: NaiveDateTime!\n  organization: Organization\n}\ntype Project {\n  id: UUID!\n  customer(id: UUID!): Customer\n  customers: [Customer!]\n  drops: [Drop!]\n  drop(id: UUID!): Drop\n  name: String!\n  organizationId: UUID!\n  createdAt: NaiveDateTime!\n  deactivatedAt: NaiveDateTime\n  profileImageUrl: String\n  organization: Organization\n  treasury: Treasury\n}\ntype Query {\n  user(id: UUID!): User\n  \n  organization(id: UUID!): Organization\n  \n  project(id: UUID!): Project\n  \n  invite(id: UUID!): Invite\n  \n  eventTypes: [EventType!]!\n}\ntype Treasury {\n  id: UUID!\n  vaultId: String!\n  createdAt: NaiveDateTime!\n  wallets: [Wallet!]\n}\ntype User {\n  id: UUID!\n  firstName: String!\n  lastName: String!\n  email: String!\n  createdAt: String!\n  updatedAt: String!\n  affiliations: [Affiliation!]!\n}\ntype Wallet {\n  address: String!\n  mints: [CollectionMint!]\n  treasuryId: UUID!\n  assetId: AssetType!\n  legacyAddress: String!\n  tag: String!\n  createdAt: NaiveDateTime!\n  removedAt: NaiveDateTime\n  createdBy: UUID!\n}\ntype Webhook {\n  createdById: UUID!\n  createdBy: User\n  id: UUID!\n  channels: [String!]!\n  projects: [Project!]!\n  endpointId: String!\n  url: String!\n  events: [String!]!\n  description: String!\n  createdAt: NaiveDateTime!\n  organizationId: UUID!\n  updatedAt: NaiveDateTime\n}\nunion Affiliation = Owner | Member\nenum AssetType {\n  SOL\n  SOL_TEST\n}\nenum Blockchain {\n  ETHEREUM\n  POLYGON\n  SOLANA\n}\nenum CreationStatus {\n  CREATED\n  PENDING\n}\nenum FilterType {\n  PROJECT_CREATED\n  CUSTOMER_CREATED\n  CUSTOMER_TREASURY_CREATED\n  PROJECT_WALLET_CREATED\n  CUSTOMER_WALLET_CREATED\n  DROP_CREATED\n  DROP_MINTED\n}\nenum InviteStatus {\n  ACCEPTED\n  REVOKED\n  SENT\n}\ninput AcceptInviteInput {\n  invite: UUID!\n}\ninput CollectionCreatorInput {\n  address: String!\n  verified: Boolean\n  share: Int!\n}\ninput CreateCredentialInput {\n  organization: UUID!\n  name: String!\n  projects: [UUID!]!\n  scopes: [String!]!\n}\ninput CreateCustomerInput {\n  project: UUID!\n}\ninput CreateDropInput {\n  project: UUID!\n  price: Int\n  sellerFeeBasisPoints: Int\n  supply: Int\n  startTime: DateTime\n  endTime: DateTime\n  blockchain: Blockchain!\n  creators: [CollectionCreatorInput!]!\n  metadataJson: MetadataJsonInput!\n}\ninput CreateOrganizationInput {\n  name: String!\n  profileImageUrl: String\n}\ninput CreateProjectInput {\n  organization: UUID!\n  name: String!\n  profileImageUrl: String\n}\ninput CreateTreasuryWalletInput {\n  treasuryId: UUID!\n  assetType: AssetType!\n}\ninput CreateWebhookInput {\n  endpoint: String!\n  organization: UUID!\n  description: String!\n  projects: [UUID!]!\n  filterTypes: [FilterType!]!\n}\ninput DeleteWebhookInput {\n  webhook: UUID!\n}\ninput InviteMemberInput {\n  organization: UUID!\n  email: String!\n}\ninput MetadataJsonAttributeInput {\n  traitType: String!\n  value: String!\n}\ninput MetadataJsonCollectionInput {\n  name: String\n  family: String\n}\ninput MetadataJsonFileInput {\n  uri: String\n  fileType: String\n}\ninput MetadataJsonInput {\n  name: String!\n  symbol: String!\n  description: String!\n  image: String!\n  animationUrl: String\n  collection: MetadataJsonCollectionInput\n  attributes: [MetadataJsonAttributeInput!]!\n  externalUrl: String\n  properties: MetadataJsonPropertyInput\n}\ninput MetadataJsonPropertyInput {\n  files: [MetadataJsonFileInput!]\n  category: String\n}\ninput MintDropInput {\n  drop: UUID!\n  recipient: String!\n}\ndirective @defer(label: String, if: Boolean! = true) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ndirective @specifiedBy(\n    \n    url: String!\n  ) on SCALAR"
}
