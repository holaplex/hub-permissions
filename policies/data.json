{
  "no_authz_inputs": [
    "CreateOrganizationInput",
    "invite",
    "AcceptInviteInput"
  ],
  "mappings": [
    {
      "namespace": "Organization",
      "inputs": [
        "organization",
        "EditOrganizationInput",
        "CreateProjectInput",
        "CreateCredentialInput",
        "EditCredentialInput",
        "DeleteCredentialInput",
        "CreateWebhookInput",
        "EditWebhookInput",
        "DeleteWebhookInput",
        "InviteMemberInput"
      ]
    },
    {
      "namespace": "Project",
      "inputs": [
        "project",
        "EditProjectInput",
        "CreateCustomerInput",
        "CreateDropInput"
      ]
    },
    {
      "namespace": "Drop",
      "inputs": [
        "MintDropInput"
      ]
    },
    {
      "namespace": "Customer",
      "inputs": [
        "CreateCustomerWalletInput"
      ]
    }
  ],
  "schema": "schema {\n  query: Query\n  mutation: Mutation\n}\n\n\ninput AcceptInviteInput {\n  \n  invite: UUID!\n}\n\n\ntype AcceptInvitePayload {\n  \n  invite: Invite!\n}\n\ntype AccessToken {\n  accessToken: String!\n  expiresAt: NaiveDateTime!\n  tokenType: String!\n}\n\n\nunion Affiliation = Owner | Member\n\n\nenum AssetType {\n  \n  SOL\n  \n  SOL_TEST\n  \n  MATIC_TEST\n  \n  MATIC\n  \n  ETH_TEST\n  \n  ETH\n}\n\nenum Blockchain {\n  ETHEREUM\n  POLYGON\n  SOLANA\n}\n\n\ntype Collection {\n  \n  id: UUID!\n  \n  blockchain: Blockchain!\n  \n  supply: Int\n  \n  creationStatus: CreationStatus!\n  \n  address: String\n  \n  totalMints: Int!\n  \n  metadataJson: MetadataJson\n  \n  mints: [CollectionMint!]\n  \n  creators: [CollectionCreator!]\n  \n  holders: [Holder!]\n}\n\ntype CollectionCreator {\n  collectionId: UUID!\n  address: String!\n  verified: Boolean!\n  share: Int!\n}\n\n\ninput CollectionCreatorInput {\n  \n  address: String!\n  \n  verified: Boolean\n  \n  share: Int!\n}\n\ntype CollectionMint {\n  id: UUID!\n  collectionId: UUID!\n  address: String!\n  owner: String!\n  creationStatus: CreationStatus!\n  createdBy: UUID!\n  createdAt: NaiveDateTime!\n  collection: Collection\n}\n\ninput CreateCredentialInput {\n  organization: UUID!\n  name: String!\n}\n\ntype CreateCredentialPayload {\n  credential: Credential!\n  accessToken: AccessToken!\n}\n\n\ninput CreateCustomerInput {\n  \n  project: UUID!\n}\n\n\ntype CreateCustomerPayload {\n  \n  customer: Customer!\n}\n\n\ninput CreateCustomerWalletInput {\n  \n  customer: UUID!\n  \n  assetType: AssetType!\n}\n\n\ntype CreateCustomerWalletPayload {\n  wallet: Wallet!\n}\n\ninput CreateDropInput {\n  project: UUID!\n  price: Int\n  sellerFeeBasisPoints: Int\n  supply: Int\n  startTime: DateTime\n  endTime: DateTime\n  blockchain: Blockchain!\n  creators: [CollectionCreatorInput!]!\n  metadataJson: MetadataJsonInput!\n}\n\ntype CreateDropPayload {\n  drop: Drop!\n}\n\ninput CreateOrganizationInput {\n  name: String!\n  profileImageUrl: String\n}\n\ntype CreateOrganizationPayload {\n  organization: Organization!\n}\n\n\ninput CreateProjectInput {\n  \n  organization: UUID!\n  \n  name: String!\n  \n  profileImageUrl: String\n}\n\n\ntype CreateProjectPayload {\n  \n  project: Project!\n}\n\ninput CreateWebhookInput {\n  url: String!\n  organization: UUID!\n  description: String!\n  projects: [UUID!]!\n  filterTypes: [FilterType!]!\n}\n\ntype CreateWebhookPayload {\n  webhook: Webhook!\n  secret: String!\n}\n\nenum CreationStatus {\n  CREATED\n  PENDING\n}\n\ntype Credential {\n  name: String!\n  clientId: String!\n  createdById: UUID!\n  organizationId: UUID!\n  createdAt: NaiveDateTime!\n  \n  createdBy: User\n}\n\n\ntype Customer {\n  \n  id: UUID!\n  \n  projectId: UUID!\n  \n  createdAt: NaiveDateTime!\n  \n  updatedAt: NaiveDateTime\n  \n  treasury: Treasury\n}\n\n\nscalar DateTime\n\ninput DeleteCredentialInput {\n  credential: String!\n}\n\ntype DeleteCredentialPayload {\n  credential: String!\n}\n\ninput DeleteWebhookInput {\n  webhook: UUID!\n}\n\ntype DeleteWebhookPayload {\n  webhook: UUID!\n}\n\ntype Drop {\n  \n  id: UUID!\n  \n  projectId: UUID!\n  \n  creationStatus: CreationStatus!\n  \n  startTime: NaiveDateTime\n  \n  endTime: NaiveDateTime\n  \n  price: Int!\n  \n  createdById: UUID!\n  \n  createdAt: NaiveDateTime!\n  \n  collection: Collection!\n  \n  status: DropStatus!\n}\n\n\nenum DropStatus {\n  \n  MINTING\n  \n  MINTED\n  \n  SCHEDULED\n  \n  EXPIRED\n  \n  CREATING\n}\n\ninput EditCredentialInput {\n  clientId: String!\n  name: String!\n}\n\ntype EditCredentialPayload {\n  credential: Credential!\n}\n\ninput EditOrganizationInput {\n  id: UUID!\n  name: String!\n  profileImageUrl: String\n}\n\ntype EditOrganizationPayload {\n  organization: Organization!\n}\n\ninput EditProjectInput {\n  id: UUID!\n  name: String!\n  profileImageUrl: String\n}\n\ntype EditProjectPayload {\n  project: Project!\n}\n\ninput EditWebhookInput {\n  webhook: UUID!\n  url: String!\n  description: String!\n  projects: [UUID!]!\n  filterTypes: [FilterType!]!\n  disabled: Boolean\n}\n\ntype EditWebhookPayload {\n  webhook: Webhook!\n}\n\ntype EventType {\n  archived: Boolean\n  createdAt: String!\n  description: String!\n  name: String!\n  schemas: JSON!\n  updatedAt: String!\n}\n\nenum FilterType {\n  PROJECT_CREATED\n  CUSTOMER_CREATED\n  CUSTOMER_TREASURY_CREATED\n  PROJECT_WALLET_CREATED\n  CUSTOMER_WALLET_CREATED\n  DROP_CREATED\n  DROP_MINTED\n}\n\n\ntype Holder {\n  \n  collectionId: UUID!\n  \n  address: String!\n  \n  owns: Int!\n  \n  mints: [String!]!\n}\n\n\ntype Invite {\n  \n  id: UUID!\n  \n  email: String!\n  \n  status: InviteStatus!\n  \n  organizationId: UUID!\n  \n  createdBy: UUID!\n  \n  createdAt: NaiveDateTime!\n  \n  updatedAt: NaiveDateTime\n  \n  member: Member\n  \n  organization: Organization\n}\n\n\ninput InviteMemberInput {\n  \n  organization: UUID!\n  \n  email: String!\n}\n\n\nenum InviteStatus {\n  \n  ACCEPTED\n  \n  REVOKED\n  \n  SENT\n}\n\n\nscalar JSON\n\n\ntype Member {\n  \n  userId: UUID!\n  \n  user: User\n  \n  id: UUID!\n  \n  organizationId: UUID!\n  \n  createdAt: NaiveDateTime!\n  \n  revokedAt: NaiveDateTime\n  \n  inviteId: UUID!\n  \n  organization: Organization\n  \n  invite: Invite\n}\n\n\ntype MetadataJson {\n  collectionId: UUID!\n  identifier: String!\n  \n  name: String!\n  \n  uri: String!\n  \n  symbol: String!\n  \n  description: String!\n  \n  image: String!\n  \n  animationUrl: String\n  \n  externalUrl: String\n  attributes: [MetadataJsonAttribute!]\n}\n\n\ntype MetadataJsonAttribute {\n  id: UUID!\n  collectionId: UUID!\n  \n  traitType: String!\n  \n  value: String!\n}\n\ninput MetadataJsonAttributeInput {\n  traitType: String!\n  value: String!\n}\n\ninput MetadataJsonCollectionInput {\n  name: String\n  family: String\n}\n\ninput MetadataJsonFileInput {\n  uri: String\n  fileType: String\n}\n\ninput MetadataJsonInput {\n  name: String!\n  symbol: String!\n  description: String!\n  image: String!\n  animationUrl: String\n  collection: MetadataJsonCollectionInput\n  attributes: [MetadataJsonAttributeInput!]!\n  externalUrl: String\n  properties: MetadataJsonPropertyInput\n}\n\ninput MetadataJsonPropertyInput {\n  files: [MetadataJsonFileInput!]\n  category: String\n}\n\ninput MintDropInput {\n  drop: UUID!\n  recipient: String!\n}\n\ntype MintEditionPayload {\n  collectionMint: CollectionMint!\n}\n\ntype Mutation {\n  \n  createCredential(input: CreateCredentialInput!): CreateCredentialPayload!\n  \n  editCredential(input: EditCredentialInput!): EditCredentialPayload!\n  \n  deleteCredential(input: DeleteCredentialInput!): DeleteCredentialPayload!\n  \n  createCustomer(input: CreateCustomerInput!): CreateCustomerPayload!\n  \n  createDrop(input: CreateDropInput!): CreateDropPayload!\n  \n  mintEdition(input: MintDropInput!): MintEditionPayload!\n  \n  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload!\n  \n  editOrganization(input: EditOrganizationInput!): EditOrganizationPayload!\n  \n  createProject(input: CreateProjectInput!): CreateProjectPayload!\n  \n  editProject(input: EditProjectInput!): EditProjectPayload!\n  \n  inviteMember(input: InviteMemberInput!): Invite!\n  \n  acceptInvite(input: AcceptInviteInput!): AcceptInvitePayload!\n  \n  createCustomerWallet(input: CreateCustomerWalletInput!): CreateCustomerWalletPayload!\n  \n  createWebhook(input: CreateWebhookInput!): CreateWebhookPayload!\n  \n  deleteWebhook(input: DeleteWebhookInput!): DeleteWebhookPayload!\n  \n  editWebhook(input: EditWebhookInput!): EditWebhookPayload!\n}\n\n\nscalar NaiveDateTime\n\n\ntype Organization {\n  \n  id: UUID!\n  credential(clientId: String!): Credential!\n  credentials(limit: Int, offset: Int): [Credential!]!\n  \n  name: String!\n  \n  createdAt: NaiveDateTime!\n  \n  deactivatedAt: NaiveDateTime\n  \n  profileImageUrl: String\n  \n  members: [Member!]\n  \n  owner: Owner\n  \n  invites(status: InviteStatus): [Invite!]!\n  \n  projects: [Project!]!\n  webhooks: [Webhook!]\n  webhook(id: UUID!): Webhook\n}\n\n\ntype Owner {\n  \n  userId: UUID!\n  \n  user: User\n  \n  id: UUID!\n  \n  The datetime, in UTC, when the organization was created.The Holaplex organization owned by the user.A Holaplex project that belongs to an organization. Projects are used to group unique NFT campaigns or initiatives, and are used to assign objects that end customers will interact with, such as drops and wallets.The unique identifier assigned to the Holaplex project.Retrieve a customer record associated with the project, using its ID.Retrieve all customer records associated with a given project.The drops associated with the project.Look up a drop associated with the project by its ID.The friendly name assigned to the Holaplex project to differentiate it from other projects belonging to the organization.The ID of the Holaplex organization to which the project belongs.The datetime, in UTC, when the project was created.The date and time in Coordinated Universal Time (UTC) when the Holaplex project was created. Once a project is deactivated, objects that were assigned to the project can no longer be interacted with.The optional profile image associated with the project, which can be used to visually represent the project.The treasury assigned to the project, which contains the project's wallets.Retrieve a user identity by providing their ID.Query an organization by its ID, this query returns `null` if the organization does not exist.Query a project by it's ID, this query returns `null` if the project does not exist.Retrieve a member invitation by its ID.\n  Res\n  \n  # Errors\n  This function fails if ...\n  A collection of wallets assigned to different entities in the Holaplex ecosystem.The unique identifier for the treasury.\n  The associated Fireblocks vault ID.\n  ## Reference\n  [Vault Objects](https://docs.fireblocks.com/api/#vault-objects)\n  The creation datetime of the vault.The treasury's associated wallets.Lookup a wallet based on its `asset_type`.A unique user identity across the entire Holaplex ecosystem. A user can be associated with multiple organizations, but they are not required to have separate login credentials.The unique identifier for the user identity.The first name of the user identity.The last name of the user identity.The email address associated with the user identity.The timestamp in UTC when the user identity was created.The timestamp in UTC when the user identity was last updated.\nA UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as\nStrings within GraphQL. UUIDs are used to assign unique identifiers to\nentities without requiring a central allocating authority.\n\n# References\n\n* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)\n* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)\nA blockchain wallet is a digital wallet that allows users to securely store, manage, and transfer their cryptocurrencies or other digital assets on a blockchain network.The wallet address.The NFTs that were minted from Holaplex and are owned by the wallet's address.The wallet's associated blockchain.The user who created the webhook.This field specifies the list of projects for which an associated object will trigger a webhook event.\"\n  projects: [Project!]!\n  endpointId: String!\n  url: String!\n  events: [FilterType!]!\n  description: String!\n  createdAt: NaiveDateTime!\n  organizationId: UUID!\n  updatedAt: NaiveDateTime\n}"
}
