schema {
  query: Query
  mutation: Mutation
}

"""Input required for accepting an invitation to the organization."""
input AcceptInviteInput {
  """The ID of the invitation."""
  invite: UUID!
}

"""The response returned after accepting an invitation to the organization."""
type AcceptInvitePayload {
  """The invitation to the organization that has been accepted."""
  invite: Invite!
}

"""An access token used to authenticate and authorize access to the Hub API."""
type AccessToken {
  """A string representing the access token used to authenticate requests."""
  accessToken: String!
  """A timestamp indicating when the access token will expire."""
  expiresAt: NaiveDateTime!
  """A string indicating the type of access token, such as "Bearer"."""
  tokenType: String!
}

"""An enum type named Affiliation that defines a user's association to an organization. The enum is derived using a Union attribute. It has two variants, each containing an associated data type:"""
union Affiliation = Owner | Member

"""Fireblocks-defined blockchain identifiers."""
enum AssetType {
  """Mainnet Solana"""
  SOL
  """
  Devnet Solana
  Note: Holaplex uses `SOL_TEST` for provisioning wallets on its staging environment but still submits transactions to mainnet.
  """
  SOL_TEST
  """
  Ploygon Mumbai Testnet
  Note: Holaplex uses `MATIC_TEST` for provisioning wallets on its staging environment but still submits transactions to mainnet.
  """
  MATIC_TEST
  """Mainnet Polygon"""
  MATIC
  """Note: Holaplex uses `ETH_TEST` for provisioning wallets on its staging environment but still submits transactions to mainnet."""
  ETH_TEST
  """Ethereum Mainnet"""
  ETH
}

enum Blockchain {
  ETHEREUM
  POLYGON
  SOLANA
}

type Collection {
  id: UUID!
  blockchain: Blockchain!
  supply: Int
  creationStatus: CreationStatus!
  address: String
  totalMints: Int!
  metadataJson: MetadataJson
  mints: [CollectionMint!]
  creators: [CollectionCreator!]
  holders: [Holder!]
}

type CollectionCreator {
  collectionId: UUID!
  address: String!
  verified: Boolean!
  share: Int!
}

input CollectionCreatorInput {
  address: String!
  verified: Boolean
  share: Int!
}

type CollectionMint {
  id: UUID!
  collectionId: UUID!
  address: String!
  owner: String!
  creationStatus: CreationStatus!
  createdBy: UUID!
  createdAt: NaiveDateTime!
  collection: Collection
}

"""This struct represents the input for creating a new API credential, including the ID of the organization that the credential will be associated with and the friendly name assigned to the credential."""
input CreateCredentialInput {
  """The ID of the organization that the new API credential will be associated with."""
  organization: UUID!
  """The friendly name assigned to the new API credential."""
  name: String!
}

"""The response payload returned after successfully creating an API credential. It includes the newly created Credential object, which represents the API credential, as well as an `AccessToken` object that can be used to authenticate requests to the Hub API."""
type CreateCredentialPayload {
  """A `Credential` object representing the newly created API credential."""
  credential: Credential!
  """An `AccessToken` object that can be used to authenticate requests to the Hub API."""
  accessToken: AccessToken!
}

"""This input object is used for creating a customer and associated treasury for holding custodial wallets on behalf of the user."""
input CreateCustomerInput {
  """The unique identifier of the project to which the customer is associated."""
  project: UUID!
}

"""This response represents the payload returned after successfully creating a new `customer` record. It contains a single field customer which is a `Customer` object representing the newly created customer record."""
type CreateCustomerPayload {
  """The customer record created by the create customer mutation."""
  customer: Customer!
}

"""Input for creating a customer wallet."""
input CreateCustomerWalletInput {
  """The customer ID."""
  customer: UUID!
  """Blockchain for wallet creation."""
  assetType: AssetType!
}

"""Response after wallet creation."""
type CreateCustomerWalletPayload {
  wallet: Wallet!
}

input CreateDropInput {
  project: UUID!
  price: Int
  sellerFeeBasisPoints: Int
  supply: Int
  startTime: DateTime
  endTime: DateTime
  blockchain: Blockchain!
  creators: [CollectionCreatorInput!]!
  metadataJson: MetadataJsonInput!
}

type CreateDropPayload {
  drop: Drop!
}

input CreateOrganizationInput {
  name: String!
  profileImageUrl: String
}

type CreateOrganizationPayload {
  organization: Organization!
}

"""The input used for creating a project."""
input CreateProjectInput {
  """The ID of the organization the project belongs to."""
  organization: UUID!
  """The friendly name to denote the project from others belonging to the organization."""
  name: String!
  """The URL of the project's profile image."""
  profileImageUrl: String
}

"""* The payload returned by the `createProject` mutation."""
type CreateProjectPayload {
  """* The project that was created."""
  project: Project!
}

input CreateWebhookInput {
  url: String!
  organization: UUID!
  description: String!
  projects: [UUID!]!
  filterTypes: [FilterType!]!
}

type CreateWebhookPayload {
  webhook: Webhook!
  secret: String!
}

enum CreationStatus {
  CREATED
  PENDING
}

"""An `OAuth2` client application used for authentication with the Hub API."""
type Credential {
  """A user-friendly name assigned to the credential."""
  name: String!
  """A unique identifier for the credential."""
  clientId: String!
  """The ID of the user who created the credential."""
  createdById: UUID!
  """The ID of the organization the credential belongs to."""
  organizationId: UUID!
  """The datetime in UTC when the credential was created."""
  createdAt: NaiveDateTime!
  """This field represents the user who created the credential."""
  createdBy: User
}

"""A customer record represents a user in your service and is used to group custodial wallets within a specific project. This allows for easy management of wallets and associated assets for a particular customer within your service."""
type Customer {
  """The unique identifier for the customer record."""
  id: UUID!
  """The ID of the project to which the customer record belongs."""
  projectId: UUID!
  """The datetime when the customer record was created."""
  createdAt: NaiveDateTime!
  """An optional datetime indicating the last time the customer record was updated. If the customer record has not been updated, this field will be `null`."""
  updatedAt: NaiveDateTime
  """The treasury assigned to the customer, which contains the customer's wallets."""
  treasury: Treasury
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

"""The input for deleting a credential."""
input DeleteCredentialInput {
  """The unique identifier assigned to the credential to be deleted."""
  credential: String!
}

"""The response for deleting a credential."""
type DeleteCredentialPayload {
  """The unique identifier assigned to the deleted credential."""
  credential: String!
}

input DeleteWebhookInput {
  webhook: UUID!
}

type DeleteWebhookPayload {
  webhook: UUID!
}

type Drop {
  id: UUID!
  projectId: UUID!
  creationStatus: CreationStatus!
  startTime: NaiveDateTime
  endTime: NaiveDateTime
  price: Int!
  createdById: UUID!
  createdAt: NaiveDateTime!
  pausedAt: NaiveDateTime
  """
  The shutdown_at field represents the date and time in UTC when the drop was shutdown
  If it is null, the drop is currently not shutdown
  """
  shutdownAt: NaiveDateTime
  collection: Collection!
  status: DropStatus!
}

enum DropStatus {
  MINTING
  MINTED
  SCHEDULED
  EXPIRED
  CREATING
  PAUSED
  SHUTDOWN
}

"""The input for editing the name of an existing credential by providing the `client_id` of the credential and the new `name` to be assigned."""
input EditCredentialInput {
  """A unique string identifier assigned to the credential during creation."""
  clientId: String!
  """The new name to be assigned to the credential."""
  name: String!
}

"""The response for editing the name of a credential."""
type EditCredentialPayload {
  """The updated credential with the edited name."""
  credential: Credential!
}

input EditOrganizationInput {
  id: UUID!
  name: String!
  profileImageUrl: String
}

type EditOrganizationPayload {
  organization: Organization!
}

input EditProjectInput {
  id: UUID!
  name: String!
  profileImageUrl: String
}

type EditProjectPayload {
  project: Project!
}

input EditWebhookInput {
  webhook: UUID!
  url: String!
  description: String!
  projects: [UUID!]!
  filterTypes: [FilterType!]!
  disabled: Boolean
}

type EditWebhookPayload {
  webhook: Webhook!
}

"""An event to which an external service can subscribe."""
type EventType {
  """Whether the event is archived or not."""
  archived: Boolean
  """The date and time when the event was created, in string format."""
  createdAt: String!
  """A description of the event."""
  description: String!
  """The name of the event."""
  name: String!
  """The JSON schema for the event payload."""
  schemas: JSON!
  """The date and time when the event was last updated, in string format."""
  updatedAt: String!
}

"""An enumeration of event types that can be subscribed to by a webhook."""
enum FilterType {
  """Event triggered when a new project is created"""
  PROJECT_CREATED
  """Event triggered when a new customer is created"""
  CUSTOMER_CREATED
  """Event triggered when a new customer treasury is created"""
  CUSTOMER_TREASURY_CREATED
  """Event triggered when a new wallet is created for a project"""
  PROJECT_WALLET_CREATED
  """Event triggered when a new wallet is created for a customer"""
  CUSTOMER_WALLET_CREATED
  """Event triggered when a new drop is created"""
  DROP_CREATED
  """Event triggered when a new drop is minted"""
  DROP_MINTED
}

type Holder {
  collectionId: UUID!
  address: String!
  owns: Int!
  mints: [String!]!
}

"""An invitation sent to join a Holaplex organization."""
type Invite {
  """The ID of the invitation."""
  id: UUID!
  """The email address of the user being invited to become a member of the organization."""
  email: String!
  """The status of the invitation."""
  status: InviteStatus!
  """The ID of the organization to which the invitation belongs."""
  organizationId: UUID!
  """The ID of the user who created the invitation."""
  createdBy: UUID!
  """The datetime, in UTC, when the invitation to join the organization was created."""
  createdAt: NaiveDateTime!
  """The datetime, in UTC, when the invitation status was updated."""
  updatedAt: NaiveDateTime
  """The member record that is generated after the invitation to join the organization is accepted. When the user has not accepted the invitation, this field returns `null`."""
  member: Member
  """The organization to which the invitation to join belongs."""
  organization: Organization
}

"""Input required for inviting a member to the organization."""
input InviteMemberInput {
  """The ID of the organization."""
  organization: UUID!
  """The email address of the invited user."""
  email: String!
}

"""The status of a member invitation."""
enum InviteStatus {
  """The member invitation has been accepted by the invited user."""
  ACCEPTED
  """The member invitation has been revoked by an existing member of the organization and is no longer valid."""
  REVOKED
  """The member invitation has been sent to the invited user."""
  SENT
}

"""A scalar that can represent any JSON value."""
scalar JSON

"""A member of a Holaplex organization, representing an individual who has been granted access to the organization."""
type Member {
  """The ID of the user who has been granted access to the Holaplex organization as a member."""
  userId: UUID!
  """The user identity who is a member of the organization."""
  user: User
  """The unique identifier of the member."""
  id: UUID!
  """The ID of the Holaplex organization to which the user has been granted access."""
  organizationId: UUID!
  """The datetime, in UTC, when the member joined the organization."""
  createdAt: NaiveDateTime!
  """The datetime, in UTC, when the member was revoked from the organization."""
  revokedAt: NaiveDateTime
  """The ID of the invitation that the member accepted to join the organization."""
  inviteId: UUID!
  """The Holaplex organization to which the member belongs, representing an individual who has been granted access to the organization."""
  organization: Organization
  """The invitation to join the Holaplex organization that the member accepted in order to gain access to the organization."""
  invite: Invite
}

type MetadataJson {
  collectionId: UUID!
  identifier: String!
  name: String!
  uri: String!
  symbol: String!
  description: String!
  image: String!
  animationUrl: String
  externalUrl: String
  attributes: [MetadataJsonAttribute!]
}

type MetadataJsonAttribute {
  id: UUID!
  collectionId: UUID!
  traitType: String!
  value: String!
}

input MetadataJsonAttributeInput {
  traitType: String!
  value: String!
}

input MetadataJsonCollectionInput {
  name: String
  family: String
}

input MetadataJsonFileInput {
  uri: String
  fileType: String
}

input MetadataJsonInput {
  name: String!
  symbol: String!
  description: String!
  image: String!
  animationUrl: String
  collection: MetadataJsonCollectionInput
  attributes: [MetadataJsonAttributeInput!]!
  externalUrl: String
  properties: MetadataJsonPropertyInput
}

input MetadataJsonPropertyInput {
  files: [MetadataJsonFileInput!]
  category: String
}

input MintDropInput {
  drop: UUID!
  recipient: String!
}

type MintEditionPayload {
  collectionMint: CollectionMint!
}

type Mutation {
  """Create an API credential to authenticate and authorize API requests to the Holaplex Hub."""
  createCredential(input: CreateCredentialInput!): CreateCredentialPayload!
  """Edit the name assigned to the API credential."""
  editCredential(input: EditCredentialInput!): EditCredentialPayload!
  """Delete the OAuth2 API credential."""
  deleteCredential(input: DeleteCredentialInput!): DeleteCredentialPayload!
  """This mutation creates a customer record and a corresponding treasury that holds custodial wallets on behalf of a user. The treasury serves as a way to group the customer's wallets together. This makes it easier to manage wallets and associated assets for the user within a specific project. The customer and treasury are associated with the specified project ID. The response includes the newly created customer record. If there is an error connecting to the database or unable to emit a customer created event, the mutation will fail and an error will be returned."""
  createCustomer(input: CreateCustomerInput!): CreateCustomerPayload!
  """
  Res
  
  # Errors
  This function fails if ...
  """
  createDrop(input: CreateDropInput!): CreateDropPayload!
  """This mutation allows for the temporary blocking of the minting of editions and can be resumed by calling the resumeDrop mutation."""
  pauseDrop(input: PauseDropInput!): PauseDropPayload!
  """This mutation resumes a paused drop, allowing minting of editions to be restored"""
  resumeDrop(input: ResumeDropInput!): ResumeDropPayload!
  """
  Shuts down a drop by writing the current UTC timestamp to the shutdown_at field of drop record.
  Returns the `Drop` object on success.
  
  # Errors
  Fails if the drop or collection is not found, or if updating the drop record fails.
  """
  shutdownDrop(input: ShutdownDropInput!): ShutdownDropPayload!
  """
  Res
  
  # Errors
  This function fails if ...
  """
  mintEdition(input: MintDropInput!): MintEditionPayload!
  """
  This mutation creates a new Holaplex organization, with the user triggering the mutation automatically assigned as the owner of the organization.
  # Errors
  This mutation produces an error if it is unable to connect to the database, emit the organization creation event, or if the user is not set in the X-USER-ID header.
  """
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload!
  """This mutation edits the name or profile image of the organization."""
  editOrganization(input: EditOrganizationInput!): EditOrganizationPayload!
  """
  This mutation creates a new project under the specified organization.
  
  # Errors
  This mutation produces an error if it is unable to connect to the database, emit the project creation event, or if the user is not set in the X-USER-ID header.
  """
  createProject(input: CreateProjectInput!): CreateProjectPayload!
  """This mutations edits the name and profile image of the project."""
  editProject(input: EditProjectInput!): EditProjectPayload!
  """
  To invite a person to the organization, provide their email address.
  # Error
  This mutation will produce an error if it is unable to connect to the database or if there is no associated user set in the X-USER-ID header.
  """
  inviteMember(input: InviteMemberInput!): Invite!
  """
  Accept an invite to the organization.
  # Error
  This mutation will produce an error if it is unable to connect to the database or if the user's email does not match the invitation.
  """
  acceptInvite(input: AcceptInviteInput!): AcceptInvitePayload!
  """
  Create a wallet for a customer and assign it to the customer's treasury account.
  
  # Errors
  The mutation will result in an error if it is unable to interact with the database or communicate with Fireblocks.
  """
  createCustomerWallet(input: CreateCustomerWalletInput!): CreateCustomerWalletPayload!
  """
  Res
  
  # Errors
  This function fails if ...
  """
  createWebhook(input: CreateWebhookInput!): CreateWebhookPayload!
  """
  Res
  
  # Errors
  This function fails if ...
  """
  deleteWebhook(input: DeleteWebhookInput!): DeleteWebhookPayload!
  """
  Res
  
  # Errors
  This function fails if ...
  """
  editWebhook(input: EditWebhookInput!): EditWebhookPayload!
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

"""A Holaplex organization is the top-level account within the Holaplex ecosystem. Each organization has a single owner who can invite members to join. Organizations use projects to organize NFT campaigns or initiatives."""
type Organization {
  """The unique identifier assigned to the Holaplex organization, which is used to distinguish it from other organizations within the Holaplex ecosystem."""
  id: UUID!
  """
  Get a single API credential by client ID.
  
  # Arguments
  
  * `ctx` - The GraphQL context object containing the database connection pool and other data.
  * `client_id` - The client ID of the API credential to retrieve.
  
  # Returns
  
  The API credential with the specified client ID.
  """
  credential(clientId: String!): Credential!
  """
  Get a list of API credentials associated with this organization.
  
  # Arguments
  
  * `ctx` - The GraphQL context object containing the database connection pool and other data.
  * `limit` - Optional limit on the number of credentials to retrieve.
  * `offset` - Optional offset for the credentials to retrieve.
  
  # Returns
  
  A list of API credentials associated with this organization.
  """
  credentials(limit: Int, offset: Int): [Credential!]!
  """The name given to the Holaplex organization, which is used to identify it within the Holaplex ecosystem and to its members and users."""
  name: String!
  """The datetime, in UTC, when the Holaplex organization was created by its owner."""
  createdAt: NaiveDateTime!
  """The datetime, in UTC, when the Holaplex organization was deactivated by its owner."""
  deactivatedAt: NaiveDateTime
  """The optional profile image associated with the Holaplex organization, which can be used to visually represent the organization."""
  profileImageUrl: String
  """The members who have been granted access to the Holaplex organization, represented by individuals who have been invited and accepted the invitation to join the organization."""
  members: [Member!]
  """The owner of the Holaplex organization, who has created the organization and has full control over its settings and members."""
  owner: Owner
  """The invitations to join the Holaplex organization that have been sent to email addresses and are either awaiting or have been accepted by the recipients."""
  invites(status: InviteStatus): [Invite!]!
  """The projects that have been created and are currently associated with the Holaplex organization, which are used to organize NFT campaigns or initiatives within the organization."""
  projects: [Project!]!
  """
  Retrieves a list of all webhooks associated with the organization.
  
  # Arguments
  
  * `ctx` - The context object representing the current request.
  
  # Returns
  
  A vector of all Webhook objects associated with the Organization, or None if there are none.
  
  # Errors
  
  This function will return an error if the data context cannot be retrieved.
  """
  webhooks: [Webhook!]
  """
  Retrieves a specific webhook associated with the organization, based on its ID.
  
  # Arguments
  
  * `ctx` - The context object representing the current request.
  * `id` - The UUID of the Webhook to retrieve.
  
  # Returns
  
  The specified Webhook object, or None if it does not exist.
  
  # Errors
  
  This function will return an error if the data context cannot be retrieved.
  """
  webhook(id: UUID!): Webhook
}

"""The owner of the Holaplex organization, who is the individual that created the organization."""
type Owner {
  """The ID of the user who created the Holaplex organization and serves as its owner."""
  userId: UUID!
  """The user identity associated with the owner of the organization."""
  user: User
  """The unique identifier assigned to the record of the user who created the Holaplex organization and serves as its owner, which is used to distinguish their record from other records within the Holaplex ecosystem."""
  id: UUID!
  """
  The ID assigned to the Holaplex organization owned by the user, which is used to distinguish it from other organizations within the Holaplex ecosystem."
  """
  organizationId: UUID!
  """The datetime, in UTC, when the organization was created."""
  createdAt: NaiveDateTime!
  """The Holaplex organization owned by the user."""
  organization: Organization
}

"""Represents input fields for pausing a drop."""
input PauseDropInput {
  drop: UUID!
}

"""Represents the result of a successful pause drop mutation."""
type PauseDropPayload {
  """The drop that has been paused."""
  drop: Drop!
}

"""A Holaplex project that belongs to an organization. Projects are used to group unique NFT campaigns or initiatives, and are used to assign objects that end customers will interact with, such as drops and wallets."""
type Project {
  """The unique identifier assigned to the Holaplex project."""
  id: UUID!
  """Retrieve a customer record associated with the project, using its ID."""
  customer(id: UUID!): Customer
  """Retrieve all customer records associated with a given project."""
  customers: [Customer!]
  drops: [Drop!]
  drop(id: UUID!): Drop
  """The friendly name assigned to the Holaplex project to differentiate it from other projects belonging to the organization."""
  name: String!
  """The ID of the Holaplex organization to which the project belongs."""
  organizationId: UUID!
  """The datetime, in UTC, when the project was created."""
  createdAt: NaiveDateTime!
  """The date and time in Coordinated Universal Time (UTC) when the Holaplex project was created. Once a project is deactivated, objects that were assigned to the project can no longer be interacted with."""
  deactivatedAt: NaiveDateTime
  """The optional profile image associated with the project, which can be used to visually represent the project."""
  profileImageUrl: String
  organization: Organization
  """The treasury assigned to the project, which contains the project's wallets."""
  treasury: Treasury
}

type Query {
  """Retrieve a user identity by providing their ID."""
  user(id: UUID!): User
  """Query an organization by its ID, this query returns `null` if the organization does not exist."""
  organization(id: UUID!): Organization
  """Query a project by it's ID, this query returns `null` if the project does not exist."""
  project(id: UUID!): Project
  """Retrieve a member invitation by its ID."""
  invite(id: UUID!): Invite
  """
  Returns a list of event types that an external service can subscribe to.
  
  # Returns
  
  A vector of EventType objects representing the different event types that can be subscribed to.
  
  # Errors
  
  This function returns an error if there was a problem with retrieving the event types.
  """
  eventTypes: [EventType!]!
}

"""Represents input fields for resuming a paused drop."""
input ResumeDropInput {
  drop: UUID!
}

"""Represents the result of a successful resume drop mutation."""
type ResumeDropPayload {
  """The drop that has been resumed."""
  drop: Drop!
}

"""Represents the input fields for shutting down a drop"""
input ShutdownDropInput {
  drop: UUID!
}

"""Represents the result of a successful shutdown drop mutation"""
type ShutdownDropPayload {
  """Drop that has been shutdown"""
  drop: Drop!
}

"""A collection of wallets assigned to different entities in the Holaplex ecosystem."""
type Treasury {
  """The unique identifier for the treasury."""
  id: UUID!
  """
  The associated Fireblocks vault ID.
  ## Reference
  [Vault Objects](https://docs.fireblocks.com/api/#vault-objects)
  """
  vaultId: String!
  """The creation datetime of the vault."""
  createdAt: NaiveDateTime!
  """The treasury's associated wallets."""
  wallets: [Wallet!]
  """Lookup a wallet based on its `asset_type`."""
  wallet(assetType: AssetType!): Wallet
}

"""A unique user identity across the entire Holaplex ecosystem. A user can be associated with multiple organizations, but they are not required to have separate login credentials."""
type User {
  """The unique identifier for the user identity."""
  id: UUID!
  """The first name of the user identity."""
  firstName: String!
  """The last name of the user identity."""
  lastName: String!
  """The email address associated with the user identity."""
  email: String!
  """The timestamp in UTC when the user identity was created."""
  createdAt: String!
  """The timestamp in UTC when the user identity was last updated."""
  updatedAt: String!
  affiliations: [Affiliation!]!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

"""
A blockchain wallet.
# Description
A blockchain wallet is a digital wallet that allows users to securely store, manage, and transfer their cryptocurrencies or other digital assets on a blockchain network.
"""
type Wallet {
  """The wallet address."""
  address: String!
  mints: [CollectionMint!]
  treasuryId: UUID!
  """The wallet's associated blockchain."""
  assetId: AssetType!
  legacyAddress: String!
  tag: String!
  createdAt: NaiveDateTime!
  removedAt: NaiveDateTime
  createdBy: UUID!
}

"""A webhook represents an endpoint registered to receive notifications for specific events within a project."""
type Webhook {
  """Retrieves the ID of the user who created the webhook."""
  createdById: UUID!
  """The user who created the webhook."""
  createdBy: User
  """Retrieves the ID of the webhook."""
  id: UUID!
  """Retrieves the channels the webhook is subscribed to."""
  channels: [String!]!
  """This field specifies the list of projects for which an associated object will trigger a webhook event."""
  projects: [Project!]!
  """Retrieves the ID of the webhook's endpoint."""
  endpointId: String!
  """Retrieves the URL of the webhook's endpoint."""
  url: String!
  """Retrieves the events the webhook is subscribed to."""
  events: [FilterType!]!
  """Retrieves the webhook's description."""
  description: String!
  """Retrieves the creation datetime of the webhook."""
  createdAt: NaiveDateTime!
  """Retrieves the ID of the organization the webhook belongs to."""
  organizationId: UUID!
  """Retrieves the last update datetime of the webhook."""
  updatedAt: NaiveDateTime
}

